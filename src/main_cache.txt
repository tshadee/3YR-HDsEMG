#include <Arduino.h>
#include <SPI.h>
// #include <WiFi.h>
// #include <WiFiAP.h>
// #include <WiFiClient.h>

// #include "ADS8686S_SPI_Handler.h"
// #include "Battery.h"
#include "COMMON_DEFS.h"
// #include "PowerSupply_Handler.h"

#define CONVST D4
#define BUSY D5
#define RST D6

#define MOSI D10
#define MISO D9
#define SCLK D8
#define CS D7

// const char* ssid = "ESP32C6T-WIFI";
// const char* password = "qw12er34";

// const unsigned long intervalMicros = (1000000 / WIFI_TRANSACTION_FREQ);
// unsigned long previousMicros = 0;
// unsigned long counter = 0;

// uint32_t wifiBuffer[WIFI_BUFFER_SIZE_BYTES];  // BUFFER_SIZE*32 bits per transmission
// uint16_t bufferIndex = 0;
// WiFiServer server(WIFI_PORT);  // port DOOM 666

void SPI_SEND(SPIClass* spi, uint16_t data);
uint16_t SPI_READ(SPIClass* spi, uint16_t data);

SPIClass* vspi = NULL;

void setup()
{
    pinMode(LED_BUILTIN, OUTPUT);
    pinMode(CONVST, OUTPUT);
    pinMode(BUSY, INPUT);
    pinMode(RST, OUTPUT);
    esp_log_level_set("*", ESP_LOG_INFO);

    delay(8000);
    if (Serial.available())
    {
        Serial.begin(115200);
    };

    vspi = new SPIClass(FSPI);
    vspi->begin(SCLK, MISO, MOSI, CS);
    pinMode(vspi->pinSS(), OUTPUT);
    digitalWrite(RST, LOW);
    delay(500);
    digitalWrite(RST, HIGH);
    delay(500);
    digitalWrite(CONVST, LOW);
    delay(100);

    digitalWrite(CONVST, HIGH);
    delayMicroseconds(1);
    digitalWrite(CONVST, LOW);
    delay(100);

    // Battery!
    // Battery lipo(GPIO_NUM_4);
    // float vbattf = lipo.readBatt();
    // if (vbattf < 3.7)
    // {
    //     log_i("VBATT = %.3f", vbattf);  // This will NEVER be true. But if it is, :shrugg:
    // };

    // Power supply init
    // PowerSupply PWR(D3);
    // PWR.enableIC();  // enable all power supplies (LM27762 and TPS61240)
    // log_i("Power ICs started");

    // SPI initialisation
    // SPIClass hspi(HSPI);
    // hspi.begin(D8, D9, D10, D7);
    // hspi.beginTransaction(SPISettings(SPI_FREQ, MSBFIRST, SPI_MODE0));
    // log_i("HSPI Bus Started");
    /* CPOL = 1, CPHA = 0.
     * TODO: SPI Frequency can be increased to 50 MHz depending on load capacitance.
     * FIXME: This holds the SPI bus and does not release it. In our case it doesn't
     * matter as only one chip uses the SPI bus but if we had multi-SPI consider releasing the bus.
     * FIXME: Ok it does matter. However, as long as you crank up the SPI frequency it shouldn't
     * matter. DO NOT use the VSPI bus because that somehow contends with the WIFI chip!
     */

    // ADC initialisation
    // ADS8686S_SPI_Handler ADC(D7, D6, D5, D4, &hspi);
    // try
    // {
    //     ADC.configureADC();
    // }
    // catch (...)
    // {
    //     log_e("ADS8686S Configuration Failed");  // error verbose
    // };

    // hspi.endTransaction();

    // Wi-Fi initialisation
    // if (!WiFi.softAP(WIFI_SSID, WIFI_PASSWORD, WIFI_CHANNEL, WIFI_SSID_HIDDEN, WIFI_CONNECTIONS,
    //                  false, WIFI_AUTH_WPA2_PSK))  // start access point
    // {
    //     log_e("Soft AP creation failed.");  // error verbose
    // };
    // IPAddress myIP = WiFi.softAPIP();  // set IP
    // Serial.print("AP IP Address:");
    // Serial.println(myIP);
    // server.begin();  // start TCP server
    // Serial.println("softAP config done.");
};

void loop()
{
    // WiFiClient client = server.accept();  // listen for incoming clients
    // if (client)
    // {
    //     Serial.println("New Client.");  // print a message out the serial port
    //     while (client.connected())
    //     {  // loop while the client's connected
    //         unsigned long currentMicros = micros();
    //         if (currentMicros - previousMicros >= intervalMicros)
    //         {
    //             previousMicros = currentMicros;
    //             for (bufferIndex = 0; bufferIndex < WIFI_BUFFER_SIZE_BYTES; bufferIndex++)
    //             {
    //                 counter++;
    //                 wifiBuffer[bufferIndex] = counter % 65536;
    //             }
    //             client.write((uint8_t*)wifiBuffer, sizeof(wifiBuffer));
    //         }
    //     }
    //     // close the connection:
    //     client.stop();
    //     Serial.println("\nClient Disconnected.");
    // }

    SPI_SEND(vspi, CONFIG_DEFAULT_CFG);
    delay(100);
    uint16_t readWord = SPI_READ(vspi, (CONFIG_DEFAULT_CFG & READBACK_MASK));
    Serial.print("Readback: ");
    Serial.println(readWord, BIN);
    delay(5000);
};

void SPI_SEND(SPIClass* spi, uint16_t data)
{
    // use it as you would the regular arduino SPI API
    spi->beginTransaction(SPISettings(SPI_FREQ, MSBFIRST, SPI_MODE0));
    digitalWrite(spi->pinSS(), LOW);  // pull SS slow to prep other end for transfer
    spi->transfer16(data);
    digitalWrite(spi->pinSS(), HIGH);  // pull ss high to signify end of data transfer
    spi->endTransaction();
};

uint16_t SPI_READ(SPIClass* spi, uint16_t data)
{
    // use it as you would the regular arduino SPI API
    spi->beginTransaction(SPISettings(SPI_FREQ, MSBFIRST, SPI_MODE0));
    digitalWrite(spi->pinSS(), LOW);  // pull SS slow to prep other end for transfer
    spi->transfer16(data);
    digitalWrite(spi->pinSS(), HIGH);  // pull ss high to signify end of data transfer
    spi->endTransaction();
    delay(10);
    spi->beginTransaction(SPISettings(SPI_FREQ, MSBFIRST, SPI_MODE0));
    digitalWrite(spi->pinSS(), LOW);  // pull SS slow to prep other end for transfer
    uint16_t returnWord = spi->transfer16(0x0000);
    digitalWrite(spi->pinSS(), HIGH);  // pull ss high to signify end of data transfer
    spi->endTransaction();
    return returnWord;
};
